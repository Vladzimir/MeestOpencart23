<?xml version="1.0" encoding="utf-8"?>
<modification>
	<name>Meest for Ajax Quick Checkout</name>
	<code>Meest Ajax Quick Checkout</code>
	<version>1.1.0</version>
	<author>Meest</author>
	<link>https://meest.com</link>
	<file path="catalog/controller/extension/module/d_quickcheckout.php">
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="after"><![CDATA[
                /* START Meest for Ajax Quick Checkout */
                	$this->document->addStyle('catalog/view/theme/default/stylesheet/meest.css');
                /* END Meest for Ajax Quick Checkout */
            ]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/d_quickcheckout.tpl">
		<operation>
			<search><![CDATA[<?php echo $footer; ?>]]></search>
			<add position="before"><![CDATA[
			<!-- START Meest AJAX Quick Checkout data -->
			<script type="text/javascript">
				(function ($) {
					var methods = {
						init: function (options) {
							return this.each(function () {
								var $this = $(this);
								var data = $this.data('meestAutocompleteAddress');

								if (!data) {
									$this.timer = null;
									$this.items = [];
									$.extend($this, options);
									$this.attr('autocomplete', 'new-password');

									$this.on('focus.meestAutocompleteAddress', function () {
										$this.request('');
									});

									$this.on('blur.meestAutocompleteAddress', function () {
										setTimeout(function (object) {
											object.hide();
										}, 200, $this);
									});

									$this.on('keydown.meestAutocompleteAddress', function (event) {
										switch (event.keyCode) {
											case 27: // escape
												$this.hide();
												break;
											default:
												$this.request();
												break;
										}
									});

									$this.click = function (event) {
										event.preventDefault();
										var id = $(event.target).parent().attr('data-id');
										var value = $(event.target).parent().attr('data-value');
										if (value && $this.items[id]) {
											$this.select($this.items[id]);
										}
									};

									$this.show = function () {
										var pos = $this.position();
										$this.siblings('ul.' + $this.class).css({
											'top': pos.top + $this.outerHeight(),
											'left': pos.left
										});
										$this.siblings('ul.' + $this.class).show();
									};

									$this.hide = function () {
										$this.siblings('ul.' + $this.class).hide();
									};

									$this.request = function (search) {
										clearTimeout($this.timer);
										$this.timer = setTimeout(function (object) {
											search = (typeof(search) === 'undefined') ? object.val() : search;
											object.source(search, $.proxy(object.response, object));
										}, 200, $this);
									};

									$this.response = function (json) {
										var html = '';
										if (json.length) {
											for (var i = 0; i < json.length; i++) {
												this.items[i] = json[i];
												html += '<li data-id="' + i + '" city-id="' + json[i]['id'] + '" data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>';
											}
										}
										if (html && $this.is(':focus')) {
											$this.show();
										} else {
											$this.hide();
										}
										$this.siblings('ul.' + $this.class).html(html);
									};

									$this.after('<ul class="' + $this.class + '"></ul>');
									$this.siblings('ul.' + $this.class).delegate('a', 'click', $.proxy($this.click, $this));
									$this.data('meestAutocompleteAddress', true);
								}
							});
						},
						destroy: function () {
							return this.each(function () {
								var $this = $(this);
								$this.removeData('meestAutocompleteAddress');
								$this.off('.meestAutocompleteAddress');
							});
						}
					};

					$.fn.meestAutocompleteAddress = function (method) {
						if (methods[method]) {
							return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
						} else if (typeof(method) === 'object' || !method) {
							return methods.init.apply(this, arguments);
						} else {
							$.error('Method "' + method + '" does not exist for jQuery.meestAutocompleteAddress');
						}
					};
				})(window.jQuery);

				function saveAddress(cityUuid, address1Uuid, meestShippingMethod) {
					return $.post('index.php?route=extension/module/meest2/saveUuid', {
						cityUuid: cityUuid,
						addressUuid: address1Uuid,
						shippingMethod: meestShippingMethod
					});
				}

				let cityUuid = null;
				let address1Uuid = null;
				let meestShippingMethod = null;

				function MeestShippingData() {
					var self = this;
					self.methods_city = [
						'meest2.warehouse',
						'meest2.courier',
						'meest2.postomat'
					];

					self.setProp = function () {
						self.method = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
						self.lang = $('html').attr('lang') || 'uk';
					};

					self.handlerChanges = function (name, value) {
						if (name.match(/zone/i)) {
							$('input[name*="city"]:visible').val('');
							$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');
						} else if (name.match(/city/i)) {
							$('input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible').val('');
						} else if (name.match(/shipping_method/i)) {
							$('input[name*="city"]:visible, input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible')
									.val('')
									.meestAutocompleteAddress('destroy');
							self.method = value;
						}
					};

					self.getAddress = function (element, search) {
						var filter, action;
						var currentMethod = self.method;

						var actionMap = {
							'meest2.warehouse': 'getBranches',
							'meest2.courier': 'getStreets',
							'meest2.postomat': 'getPoshtomat'
						};

						if (element[0].name.match(/city/i)) {
							action = 'getCities';
							filter = $('[name*="zone"]:visible').val() || '';
						} else if (element[0].name.match(/address_1/i)) {
							action = actionMap[currentMethod] || 'getBranches';
							filter = self.cityFilter;
							if (!filter) {
                            	return $.Deferred().resolve([]).promise();
                          }
						}

						if (!search) {
							search = element[0].value;
						}

						return $.ajax({
							url: 'index.php?route=extension/module/meest2/getMeestData',
							type: 'POST',
							data: {
								action: action,
								filter: encodeURIComponent(filter),
								search: encodeURIComponent(search)
							},
							dataType: 'json',
							global: false,
							success: function (json) {
								self.src = json;
							}
						});
					};
				}

				$(function () {
					var meestShippingData = new MeestShippingData();
					meestShippingData.setProp();

					// Flag to track if the current method is a Meest method
					// var meestMethodActive = meestShippingData.methods_city.includes(meestShippingData.method);

					$(document).ajaxStop(function () {
						meestShippingData.setProp();
					});

					$(document).on('change', '[name*="shipping_method"]', function (e) {
						meestShippingData.handlerChanges(e.target.name, e.target.value);
						// Flag to track if the current method is a Meest method
						var meestMethodActive = meestShippingData.methods_city.includes(meestShippingData.method);
						// Check if the previous method was Meest and the current is not
						if (meestMethodActive) { // && !meestShippingData.methods_city.includes(meestShippingData.method)) {
							// Clear fields and destroy autocomplete for non-Meest methods
							$('input[name*="city"]:visible, input[name*="address_1"]:visible, input[name*="address_2"]:visible, input[name*="street"]:visible')
									.each(function () {
										const $field = $(this);

										// Only clear fields if they were autofilled
										if ($field.data('autofilled') === true) {
											$field.val('').removeData('autofilled');
										}

										// Destroy autocomplete functionality
										$field.meestAutocompleteAddress('destroy');
									});

							// Reset the flag so the code does not execute again
							meestMethodActive = false;
							$('input[name*="address_1"]:visible').val('');
							$('input[name*="city"]:visible').val('');
						} else if (!meestMethodActive && meestShippingData.methods_city.includes(meestShippingData.method)) {
							// If switched back to a Meest method, reactivate the flag
							$('input[name*="address_1"]:visible').val('');
							$('input[name*="city"]:visible').val('');
							meestMethodActive = true;
						}
					});


					$('input[name="city"]:visible').val('');
					$('input[name="address_1"]:visible').val('');
					saveAddress('', '', $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val());

					$(document).on('change', 'input[name="shipping_method"]:visible', function (e) {
						var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
						$('input[name="city"]:visible').val('');
						$('input[name="address_1"]:visible').val('');
						saveAddress('', '', currentMethod);
					});

					// Set up autocomplete for city input when Meest method is selected
					$('body').on('focus', 'input[name*="city"]:visible', function () {
						var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
                        var methods_meestA = [
                          'meest2.warehouse',
                          'meest2.courier',
                          'meest2.postomat'
                        ];

                        if (!methods_meestA.includes(currentMethod)) {
                        	meestShippingData.src = [];
                            return $.Deferred().resolve([]).promise();
                        }
                        meestShippingData.src = [];
						if (meestShippingData.methods_city.includes(meestShippingData.method)) {
							$(this).meestAutocompleteAddress({
								source: function (request, response) {
									meestShippingData.getAddress(this, request).done(function () {
										response($.map(meestShippingData.src, function (item) {
										 	let regionPart = item['region'] ? ', обл. ' + item['region'] : '';
										    let typeC = item['type'] ? item['type'] + ' ' : '';
										    let label = typeC + item['name'] + regionPart;
										    return {
										    	id: item['id'] || '',
												label: label,
												value: item['name'],
												region_name: item['region'],
												type: item['type']
											};
										}));
									});
								},
								select: function (e) {
									cityUuid = e.id;
									saveAddress(cityUuid, address1Uuid, currentMethod);
									$('input[name*="address_1"]:visible').val('');
									this.val(e.label).data('autofilled', true); // Mark as autofilled
									meestShippingData.city = e.id;
									meestShippingData.cityFilter = e.id;
									this.trigger('change');
								},
								class: 'dropdown-address'
							});
						} else {
							// Destroy autocomplete if the method is not Meest
							$(this).meestAutocompleteAddress('destroy');
						}
					});

					// Set up autocomplete for address_1 input when Meest method is selected
					$('body').on('focus', 'input[name*="address_1"]:visible', function () {
						var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
						var methods_meestA = [
						  'meest2.warehouse',
						  'meest2.courier',
						  'meest2.postomat'
						];

						if (!methods_meestA.includes(currentMethod)) {
							meestShippingData.src = [];
						  	return $.Deferred().resolve([]).promise();
						}
						meestShippingData.src = [];
						if (meestShippingData.methods_city.includes(meestShippingData.method)) {
							$(this).meestAutocompleteAddress({
								source: function (request, response) {
									meestShippingData.getAddress(this, request).done(function () {
										response($.map(meestShippingData.src, function (item) {
											let fullLabel = item['description'] ? item['description'].trim() : '';
											if (item['address_more_information']) {
												fullLabel += ' (' + item['address_more_information'] + ')';
											}
											return {
												id: item['id'] || '',
												label: fullLabel,
												value: fullLabel
											};
										}));
									});
								},
								select: function (e) {
									address1Uuid = e.id;
									var $this = $(this);
									saveAddress(cityUuid, address1Uuid, currentMethod).done(function(response) {
										$this.val(e.value);
										$this.trigger('change');
                                	});
								},
								class: 'dropdown-address'
							});
						} else {
							// Destroy autocomplete if the method is not Meest
							$(this).meestAutocompleteAddress('destroy');
						}
					});
				});
			</script>
			<!-- END Meest AJAX Quick Checkout data -->
			]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/d_quickcheckout/shipping_method.tpl">
		<operation>
			<search><![CDATA[<% _.each(shipping_method.quote, function(quote) { %>]]></search>
			<add position="after"><![CDATA[
				<!-- START Meest AJAX Quick Checkout data -->
					<% if (quote.error) { %>
						<div class="alert alert-danger"><%= quote.error %></div>
					<% } %>
				<!-- END Meest AJAX Quick Checkout data -->
			]]></add>
		</operation>
	</file>
</modification>
