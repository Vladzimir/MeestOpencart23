<?xml version="1.0" encoding="utf-8"?>
<modification>
	<name>Meest for Simple Checkout</name>
	<code>Meest Simple Checkout</code>
	<version>1.1.0</version>
	<author>Meest</author>
	<link>https://meest.com</link>
	<sort_order>200</sort_order>
	<file path="catalog/controller/checkout/simplecheckout.php">
		<operation>
			<search><![CDATA[public function index(]]></search>
			<add position="after"><![CDATA[
                /* START Meest for Simple Checkout */
                $this->document->addStyle('catalog/view/theme/default/stylesheet/meest.css');
                /* END Meest for Simple Checkout */
            ]]></add>
		</operation>
	</file>
	<file path="catalog/model/tool/simpleapimain.php|catalog/model/tool/simpleapicustom.php">
		<operation>
			<search><![CDATA[extends Model {]]></search>
			<add position="after"><![CDATA[
					/* START Updated methods for working with Meest */
					public function getShippingCitiesWithMeest($zone_id) {
						$this->load->model('extension/module/shippingdata');
						$shipping_method = $this->model_extension_module_shippingdata->getShippingMethod();

						$values = array(
							array(
								'id'   => '',
								'text' => $this->language->get('text_select')
							)
						);

						if ($shipping_method == 'justin') {
							$results = $this->model_extension_module_shippingdata->getJustinCities($zone_id);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'ukrposhta') {
							$results = $this->model_extension_module_shippingdata->getUkrPoshtaCities($zone_id);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'rozetka_delivery') {
							$results = $this->model_extension_module_shippingdata->getRozetkaDeliveryCities();

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'meest2') {
							$this->load->model('extension/shipping/meest2');
							$results = $this->model_extension_shipping_meest2->getMeest2Cities($zone_id);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['name_ua']),
										'text' => trim($result['type_ua']) . ' ' . trim($result['name_ua'])
									);
								}
							}
						} else {
							$results = $this->model_extension_module_shippingdata->getNovaPoshtaCities($zone_id);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}
						}

						return $values;
					}
					public function getShippingDepartmentsWithMeest($city_name) {
						$this->load->model('extension/module/shippingdata');
						$shipping_method = $this->model_extension_module_shippingdata->getShippingMethod();

						$values = array(
							array(
								'id'   => '',
								'text' => $this->language->get('text_select')
							)
						);

						if ($shipping_method == 'justin') {
							$results = $this->model_extension_module_shippingdata->getJustinDepartments($city_name);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'ukrposhta') {
							$results = $this->model_extension_module_shippingdata->getUkrPoshtaDepartments($city_name, '', $shipping_method['sub_method']);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'rozetka_delivery') {
							$results = $this->model_extension_module_shippingdata->getRozetkaDeliveryDepartments($city_name);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}

						} elseif ($shipping_method['method'] == 'meest2') {
							$this->load->model('extension/shipping/meest2');

							$results = $this->model_extension_shipping_meest2->getBranchesByCityMeest($city_name, $shipping_method['sub_method']);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['short_name']) . ' ' . trim($result['branch_type']),
										'text' => trim($result['short_name']) . ' ' . trim($result['branch_type'])
									);
								}
							}

						} else {
							$results = $this->model_extension_module_shippingdata->getNovaPoshtaDepartments($city_name);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['description']),
										'text' => trim($result['description'])
									);
								}
							}
						}

						return $values;
					}
					public function getShippingPoshtomatsWithMeest($city_name) {
						$this->load->model('extension/module/shippingdata');

						$values = array(
							array(
								'id'   => '',
								'text' => $this->language->get('text_select')
							)
						);

						$results = $this->model_extension_module_shippingdata->getNovaPoshtaPoshtomats($city_name);

						$shipping_method = $this->model_extension_module_shippingdata->getShippingMethod();

						if ($shipping_method['method'] == 'meest2') {
							$this->load->model('extension/shipping/meest2');

							$results = $this->model_extension_shipping_meest2->getBranchesByCityMeest($city_name, $shipping_method['sub_method']);

							if (!$results) {
								$values[] = array(
									'id'   => 0,
									'text' => $this->language->get('text_none')
								);
							} else {
								foreach ($results as $result) {
									$values[] = array(
										'id'   => trim($result['short_name']) . ' ' . trim($result['branch_type']),
										'text' => trim($result['short_name']) . ' ' . trim($result['branch_type'])
									);
								}
							}
						}
						elseif (!$results) {
							$values[] = array(
								'id'   => 0,
								'text' => $this->language->get('text_none')
							);
						} else {
							foreach ($results as $result) {
								$values[] = array(
									'id'   => trim($result['description']),
									'text' => trim($result['description'])
								);
							}
						}

						return $values;
					}
					/* START END updated methods for working with Meest */
			  ]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/simplecheckout.tpl">
		<operation>
			<search><![CDATA[<?php include]]></search>
			<add position="before"><![CDATA[
			<!-- START Meest for Simple Checkout -->
            <script type="text/javascript">
            (function ($) {
                var methodsMeest = {
                    init: function (options) {
                        return this.each(function () {
                            var $this = $(this);
                            var data = $this.data('autocompleteMeestAddress');

                            if (!data) {
                                $this.timer = null;
                                $this.items = new Array();
                                $.extend($this, options);
                                $this.attr('autocomplete', 'new-password');

                                // On focus, request autocomplete data
                                $this.on('focus.autocompleteMeestAddress', function () {
                                    $this.request('');
                                });

                                // On blur, hide the autocomplete list after a delay
                                $this.on('blur.autocompleteMeestAddress', function () {
                                    setTimeout(function (object) {
                                        object.hide();
                                    }, 200, $this);
                                });

                                // On keydown, handle escape key and trigger request
                                $this.on('keydown.autocompleteMeestAddress', function (event) {
                                    switch (event.keyCode) {
                                        case 27: // escape
                                            $this.hide();
                                            break;
                                        default:
                                            $this.request();
                                            break;
                                    }
                                });

                                // Click event for autocomplete items
                                $this.click = function (event) {
                                    event.preventDefault();
                                    var id = $(event.target).parent().attr('data-id');
                                    var value = $(event.target).parent().attr('data-value');
                                    if (value && $this.items[id]) {
                                        $this.select($this.items[id]);
                                    }
                                };

                                // Show autocomplete list
                                $this.show = function () {
                                    var pos = $this.position();
                                    $this.siblings('ul.' + $this.class).css({
                                        'top': pos.top + $this.outerHeight(),
                                        'left': pos.left
                                    });
                                    $this.siblings('ul.' + $this.class).show();
                                };

                                // Hide autocomplete list
                                $this.hide = function () {
                                    $this.siblings('ul.' + $this.class).hide();
                                };

                                // Request autocomplete data
                                $this.request = function (search) {
                                    clearTimeout($this.timer);
                                    $this.timer = setTimeout(function (object) {
                                        search = (typeof(search) === 'undefined') ? object.val() : search;
                                        object.source(search, $.proxy(object.response, object));
                                    }, 200, $this);
                                };

                                // Handle autocomplete response
                                $this.response = function (json) {
                                    var html = '';
                                    var i;
                                    if (json.length) {
                                        for (i = 0; i < json.length; i++) {
                                            this.items[i] = json[i];
                                            html += '<li data-id="' + i + '" city-id="' + json[i]['id'] + '" data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>';
                                        }
                                    }
                                    if (html && $this.is(':focus')) {
                                        $this.show();
                                    } else {
                                        $this.hide();
                                    }
                                    $this.siblings('ul.' + $this.class).html(html);
                                };

                                $this.after('<ul class="' + $this.class + '"></ul>');
                                $this.siblings('ul.' + $this.class).delegate('a', 'click', $.proxy($this.click, $this));
                                $this.data('autocompleteMeestAddress', true);
                            }
                        });
                    },
                    destroy: function () {
                        return this.each(function () {
                            var $this = $(this);
                            $this.removeData('autocompleteMeestAddress');
                            $this.off('.autocompleteMeestAddress');
                        });
                    }
                };

                $.fn.autocompleteMeestAddress = function (method) {
                    if (methodsMeest[method]) {
                        return methodsMeest[method].apply(this, Array.prototype.slice.call(arguments, 1));
                    } else if (typeof(method) === 'object' || !method) {
                        return methodsMeest.init.apply(this, arguments);
                    } else {
                        $.error('Method "' + method + '" does not exist for jQuery.autocompleteMeestAddress');
                    }
                };
            })(window.jQuery);

            function saveAddress(cityUuid, address1Uuid, meestShippingMethod) {
                return $.post('index.php?route=extension/module/meest2/saveUuid', {
                    cityUuid: cityUuid,
                    addressUuid: address1Uuid,
                    shippingMethod: meestShippingMethod
                });
            }

            let cityUuid = null;
            let address1Uuid = null;
            let meestShippingMethod = null;

            function MeestUniqueShippingData() {
                var self = this;
                var src, method, lang, city;

                self.methods_city = [
                    'meest2.warehouse',
                    'meest2.courier',
                    'meest2.postomat'
                ];

                self.setProp = function () {
                    self.method = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
                    self.lang = $('html').attr('lang') || 'uk';
                };

                self.handlerChanges = function (name, value) {
                    if (name.match(/zone/i)) {
                        $('input[name="shipping_address[city]"]:visible').val('');
                        $('input[name="shipping_address[address_1]"]:visible').val('');
                    } else if (name.match(/city/i)) {
                        $('input[name="shipping_address[address_1]"]:visible').val('');
                    } else if (name.match(/shipping_method/i)) {
                        $('input[name="shipping_address[city]"]:visible, input[name="shipping_address[address_1]"]:visible')
                            .val('')
                            .autocompleteMeestAddress('destroy');
                        self.method = value;
                    }
                };

                self.getAddress = function (element, search) {
                    var filter, action;
                    var currentMethod = self.method;

                    var actionMap = {
                        'meest2.warehouse': 'getBranches',
                        'meest2.courier': 'getStreets',
                        'meest2.postomat': 'getPoshtomat'
                    };

                    if (element[0].name.match(/city/i)) {
                        action = 'getCities';
                        filter = $('[name="shipping_address[zone_id]"]:visible').val() || '';
                    } else if (element[0].name.match(/address_1/i)) {
                        action = actionMap[currentMethod] || 'getBranches';
                        filter = self.cityFilter;
                        if (!filter) {
                            return $.Deferred().resolve([]).promise();
                        }
                    }

                    if (!search) {
                        search = element[0].value;
                    }

                    return $.ajax({
                        url: 'index.php?route=extension/module/meest2/getMeestData',
                        type: 'POST',
                        data: {
                            action: action,
                            filter: encodeURIComponent(filter),
                            search: encodeURIComponent(search)
                        },
                        dataType: 'json',
                        global: false,
                        success: function (json) {
                            self.src = json;
                        }
                    });
                };
            }

            $(function () {
                var meestUniqueShippingData = new MeestUniqueShippingData();
                meestUniqueShippingData.setProp();

                $('input[name="shipping_address[city]"]').val('');//.removeAttr('city-id')

                $(document).ajaxStop(function () {
                    meestUniqueShippingData.setProp();
                });

                $(document).on('change', '[name="shipping_address[zone_id]"]:visible, [name="shipping_address[city]"]:visible, [name="shipping_method"]', function (e) {
                    meestUniqueShippingData.handlerChanges(e.target.name, e.target.value);
                });


				$('input[name="shipping_address[city]"]:visible').val('');
				$('input[name="shipping_address[address_1]"]:visible').val('');
				saveAddress('', '', $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val());

				$(document).on('change', 'input[name="shipping_method"]:visible', function (e) {
					var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
					$('input[name="shipping_address[city]"]:visible').val('');
					$('input[name="shipping_address[address_1]"]:visible').val('');
					saveAddress('', '', currentMethod);
				});

                // For city autocomplete - no changes needed here
                $('body').on('focus', 'input[name="shipping_address[city]"]:visible', function () {
					var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();
					var methods_meestA = [
					  'meest2.warehouse',
					  'meest2.courier',
					  'meest2.postomat'
					];

					if (!methods_meestA.includes(currentMethod)) {
                        meestUniqueShippingData.src = [];
						return $.Deferred().resolve([]).promise();
					}
					meestUniqueShippingData.src = [];
                    $(this).autocompleteMeestAddress({
                        source: function (request, response) {
                            if ($.inArray(meestUniqueShippingData.method, meestUniqueShippingData.methods_city) === -1) {
                                response([]);
                                return;
                            }

                            meestUniqueShippingData.getAddress(this, request).done(function () {
                                response($.map(meestUniqueShippingData.src, function (item) {
                                   	let regionPart = item['region'] ? ', обл. ' + item['region'] : '';
									let typeC = item['type'] ? item['type'] + ' ' : '';
									let label = typeC + item['name'] + regionPart;
									return {
										id: item['id'] || '',
										label: label,
										value: item['name'],
										region_name: item['region'],
										type: item['type']
									};
                                }));
                            });
                        },
                        select: function (e) {
                            cityUuid = e.id;
                            saveAddress(cityUuid, address1Uuid, currentMethod);
                            $('input[name="shipping_address[address_1]"]:visible').val('');
                            this.val(e.label);
                            meestUniqueShippingData.city = e.id;
                            meestUniqueShippingData.cityFilter = e.id;
                            this.trigger('change');
                        },
                        class: 'dropdown-address'
                    });
                });

                // For address_1 autocomplete, add non-duplication logic and call meestUniqueSaveAddress
                $('body').on('focus', 'input[name="shipping_address[address_1]"]:visible', function () {
                	var cityValue = $('input[name*="city"]:visible').val();

				  	if (cityValue && cityValue.trim() !== '') {

						var currentMethod = $('input[name="shipping_method"]:checked').val() || $('select[name="shipping_method"]').val();

					    var methods_meestA = [
							'meest2.warehouse',
							'meest2.courier',
							'meest2.postomat'
					     ];

					  	if (!methods_meestA.includes(currentMethod)) {
                            meestUniqueShippingData.src = [];
							return $.Deferred().resolve([]).promise();
					  	}
					  	meestUniqueShippingData.src = [];
						$(this).autocompleteMeestAddress({
							source: function (request, response) {
								if ($.inArray(meestUniqueShippingData.method, meestUniqueShippingData.methods_city) === -1) {
									response([]);
									return;
								}

								meestUniqueShippingData.getAddress(this, request).done(function () {
									response($.map(meestUniqueShippingData.src, function (item) {
 										let fullLabel = item['description'] ? item['description'].trim() : '';
                                        if (item['address_more_information']) {
                                            fullLabel += ' (' + item['address_more_information'] + ')';
                                        }

										return {
                                            id: item['id'] || '',
											label: fullLabel,
											value: fullLabel
										};
									}));
								});
							},
							select: function (e) {
                                address1Uuid = e.id;
                                var $this = $(this);
								saveAddress(cityUuid, address1Uuid, currentMethod).done(function(response) {
									$this.val(e.value);
									$this.trigger('change');
								});
							},
							class: 'dropdown-address'
						});
					}
                });
            });
            </script>
            <!-- END Meest for Simple Checkout -->
            ]]></add>
		</operation>
	</file>
	<file path="catalog/view/theme/*/template/checkout/simplecheckout_shipping.tpl">
		<operation>
			<search><![CDATA[<div class="radio">]]></search>
			<add position="before"><![CDATA[
				<!-- START Meest Simple Checkout data -->
					<?php if (!empty($quote['error'])) { ?>
						<div class="simplecheckout-error-text"><?php echo $quote['error']; ?></div>
					<?php } ?>
				<!-- END Meest Simple Checkout data -->
			]]></add>
		</operation>
	</file>
</modification>
